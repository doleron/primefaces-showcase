<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                xmlns:ai="http://primefaces.org/ai"
                template="/WEB-INF/template.xhtml">

    <ui:define name="title">
        Pattern Detector - <span class="subitem">Basic</span>
    </ui:define>

    <ui:define name="description">
        Basic usage of PrimeFaces AI Pattern Detector.
    </ui:define>

    <ui:param name="documentationLink" value="/ai/patterndetector" />

	<ui:define name="implementation">
    
        <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs/dist/tf.min.js"> </script>
        <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/facemesh"></script>

        <video id="video" width="640" height="480" style="display: none"/>
        <button id="command">Play</button>
        <canvas id="canvas" width="640" height="480"></canvas>

        <script type="text/javascript">
            //<![CDATA[

			const video = document.getElementById("video");

			var canvas = document.getElementById('canvas');
			var context = canvas.getContext('2d');
            var commandButton = document.getElementById("command");

            var model;
            var modelInitialized = false;
            async function setupTF() {
                model = await facemesh.load();
                //warm-up
                model.estimateFaces(tf.zeros([640, 480, 3]));
                modelInitialized = true;
            }

            var faceX = 0;
            var faceY = 0;
            var faceW = 0;
            var faceH = 0;

            function drawDetections(face) {
                var boundingBox = face.boundingBox;
                if(boundingBox) {
                	faceX = boundingBox.topLeft[0][0];
                	faceY = boundingBox.topLeft[0][1];
                	faceW = boundingBox.bottomRight[0][0] - faceX;
                    faceH = boundingBox.bottomRight[0][1] - faceY;
                }
            }

            async function detect(callback) {
                if (modelInitialized && video.readyState) {
                    const faces = await model.estimateFaces(video);
                    faces.forEach(face => drawDetections(face));
                }
            }
            
            setupTF();

            function drawImage() {
            	context.drawImage(video, 0, 0, 640, 480);
                if(faceW > 0 && faceH > 0) {
                	context.beginPath();
                    context.rect(faceX, faceY, faceW, faceH);
                    context.lineWidth = 7;
                    context.strokeStyle = 'white';
                    context.stroke();
                }
            }

            var play = false;
            var detectCount = 0;
            function loop() {
                if(play) {
                    if(detectCount < 2) {
                    	detectCount++;
                    } else {
                    	detect(drawDetections);
                    	detectCount = 0;
                    }
                	drawImage();
                }
            }

            async function control() {
                if (play) {
                	video.srcObject.getTracks().forEach(function(track) {
                    	  track.stop();
                    	});
                    play = false;
                    commandButton.innerHTML = 'Play';
                    context.clearRect(0, 0, canvas.width, canvas.height);
                } else {
                    play = true;
        		    if(navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            			navigator.mediaDevices.getUserMedia({ video: true }).then(function(stream) {
                			video.srcObject = stream;
                			video.play();
            			});
        			}
                    commandButton.innerHTML = 'Stop';
                }
            }

            commandButton.addEventListener("click", async (e) => {
            	control();
    		});

			setInterval(function(){ loop(); }, 30);

			//]]>

		</script>

    </ui:define>

</ui:composition>
